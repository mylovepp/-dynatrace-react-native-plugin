"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const react_native_1 = require('@dynatrace/react-native-plugin/lib/react-native');
const BouncyCheckbox_style_1 = tslib_1.__importStar(require("./BouncyCheckbox.style"));
const defaultCheckImage = require("./check.png");
class BouncyCheckbox extends React.Component {
    constructor(props) {
        super(props);
        this.spring = () => {
            const { useNativeDriver = true } = this.props;
            const { checked, springValue } = this.state;
            this.setState({ checked: !checked }, () => {
                springValue.setValue(0.7);
                react_native_1.Animated.spring(springValue, {
                    toValue: 1,
                    friction: 3,
                    useNativeDriver,
                }).start();
                // ? Outside of the onPress function
                const { onPress } = this.props;
                if (onPress) {
                    onPress(this.state.checked);
                }
            });
        };
        this.renderCheckIcon = () => {
            const { checked, springValue } = this.state;
            const { size = 25, iconStyle, iconComponent, borderWidth = 1, borderRadius = 20, checkImageWidth = 10, checkImageHeight = 10, fillColor = "#ffc484", ImageComponent = react_native_1.Image, borderColor = "#ffc484", unfillColor = "transparent", checkImageSource = defaultCheckImage, } = this.props;
            return (<react_native_1.Animated.View style={[
                { transform: [{ scale: springValue }] },
                BouncyCheckbox_style_1._iconContainer(size, borderWidth, borderRadius, borderColor, checked, fillColor, unfillColor),
                iconStyle,
            ]}>
        {iconComponent || (<ImageComponent source={checkImageSource} style={BouncyCheckbox_style_1._iconImageStyle(checkImageWidth, checkImageHeight, checked)}/>)}
      </react_native_1.Animated.View>);
        };
        this.state = {
            checked: false,
            springValue: new react_native_1.Animated.Value(1),
        };
    }
    componentDidMount() {
        this.setState({ checked: this.props.isChecked || false });
    }
    render() {
        const { style, textStyle, fontFamily, fontSize = 16, textDecoration, disableText = false, color = "#757575", text = "Call my mom ðŸ˜‡", } = this.props;
        return (<react_native_1.TouchableOpacity {...this.props} style={[BouncyCheckbox_style_1.default.container, style]} onPress={this.spring.bind(this, react_native_1.Easing.bounce)}>
        {this.renderCheckIcon()}
        {!disableText && (<react_native_1.View style={BouncyCheckbox_style_1.default.textContainer}>
            <react_native_1.Text style={[
            BouncyCheckbox_style_1._textStyle(this.state.checked, color, fontFamily, fontSize, textDecoration),
            textStyle,
        ]}>
              {text}
            </react_native_1.Text>
          </react_native_1.View>)}
      </react_native_1.TouchableOpacity>);
    }
}
exports.default = BouncyCheckbox;
//# sourceMappingURL=BouncyCheckbox.js.map