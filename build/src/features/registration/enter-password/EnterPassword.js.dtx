import React, { PureComponent } from "react";
import { TouchableWithoutFeedback } from '@dynatrace/react-native-plugin/lib/react-native/';
import PropTypes from "prop-types";
import styled from "styled-components/native";

import { ViewContainer } from "../../../components";
import { Body2, TextInput, Button } from "../../../components-2";

const Container = styled.View`
  flex: 1;
  background-color: ${props => props.theme.sectionBackgroundColor};
`;

const EnterPasswordContainer = styled(ViewContainer)`
  padding: ${props => props.theme.spacingMedium};
`;

const TitleContainer = styled.View`
  margin-bottom: ${props => props.theme.spacingMedium};
`;

const ButtonContainer = styled.View`
  padding: ${props => props.theme.spacingMedium};
`;

const Body2Styled = styled(Body2)`
  color: ${props => props.theme.contentColorHigh};
`;

class EnterPassword extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      password: ""
    };

    if (props.onBackButtonPress) {
      props.navigator.setStyle({
        navBarCustomView: "passwordNavigationBarButton",
        navBarCustomViewInitialProps: {
          onPressCustomBackButton: props.onBackButtonPress
        }
      });
    }
  }

  onChangePassword = password => {
    this.setState({
      password
    });
  };

  onSubmit = () => {
    const { password } = this.state;
    const { dismissKeyboard, onSubmitPassword } = this.props;
    dismissKeyboard();
    onSubmitPassword(password);
  };

  render() {
    const { password } = this.state;
    const {
      titleText,
      instructionalText,
      placeholderText,
      submitText,
      serverErrorMessage,
      getErrorMessage,
      dismissKeyboard
    } = this.props;

    const errorMessage = getErrorMessage(serverErrorMessage);
    const isError = getErrorMessage(serverErrorMessage) !== null && errorMessage !== "";

    return (
      <TouchableWithoutFeedback onPress={dismissKeyboard}>
        <Container>
          <EnterPasswordContainer isFullScreen>
            <TitleContainer>
              <Body2Styled>{titleText}</Body2Styled>
            </TitleContainer>
            <TextInput
              label={instructionalText}
              autoCapitalize="none"
              returnKeyType="go"
              secure
              placeholder={placeholderText}
              onChangeText={this.onChangePassword}
              helperText={isError ? errorMessage : ""}
              variant={isError ? "error" : ""}
            />
          </EnterPasswordContainer>
          <ButtonContainer>
            <Button
              label={submitText}
              onPress={this.onSubmit}
              disable={password.length === 0}
              size="large"
            />
          </ButtonContainer>
        </Container>
      </TouchableWithoutFeedback>
    );
  }
}

EnterPassword.defaultProps = {
  serverErrorMessage: "",
  titleText: "",
  instructionalText: "",
  placeholderText: "",
  submitText: "",
  onBackButtonPress: null
};

EnterPassword.propTypes = {
  titleText: PropTypes.string,
  instructionalText: PropTypes.string,
  placeholderText: PropTypes.string,
  submitText: PropTypes.string,
  serverErrorMessage: PropTypes.string,
  onSubmitPassword: PropTypes.func.isRequired,
  getErrorMessage: PropTypes.func.isRequired,
  dismissKeyboard: PropTypes.func.isRequired,
  navigator: PropTypes.shape({
    setStyle: PropTypes.func,
    pop: PropTypes.func.isRequired
  }).isRequired,
  onBackButtonPress: PropTypes.func
};

export default EnterPassword;
