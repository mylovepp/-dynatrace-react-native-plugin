import { debounce } from "lodash";
import { TouchableOpacity } from '@dynatrace/react-native-plugin/lib/react-native/';
import PropTypes from "prop-types";
import React, { useCallback, useEffect, useState } from "react";
import i18n from "react-native-i18n";
import styled from "styled-components/native";
import {
  Body2,
  Body3,
  Header1,
  Header3,
  PinNumberInput,
  TextOverlineR
} from "../../../../components-2";
import AccountDeletionFormWrapper, { FormButton } from "../form-wrapper";

const TitleLabel = styled(Header1)`
  color: ${props => props.theme.contentColorVeryHigh};
`;
const DescriptionLabel = styled(Body2)`
  color: ${props => props.theme.contentColorHigh};
`;
const ResendWarning = styled(Body3)`
  text-align: center;
  color: ${props => props.theme.contentColorHigh};
`;
const ResendLabel = styled(Body3)`
  color: ${props =>
    props.disabled ? props.theme.contentColorHigh : props.theme.contentColorCTAPurple};
  margin-left: 2;
`;
const ErrorLabel = styled(Header3).attrs({
  variant: "error"
})`
  margin-vertical: ${props => props.theme.spacingXSmall};
  text-align: ${props => (props.alignLeft ? "left" : "center")};
`;
const ReferenceLabel = styled(TextOverlineR)`
  color: ${props => props.theme.contentColorMedium};
  text-align: center;
`;

const HeaderContainer = styled.View`
  flex: 1;
  overflow: hidden;
`;
const ErrorContainer = styled.View`
  margin-vertical: ${props => props.theme.spacingXSmallValue};
`;
const ResentContainer = styled.View`
  flex-direction: row;
  justify-content: center;
`;
const InputContainer = styled.View`
  flex: 1;
`;
const PinContainer = styled.View`
  margin-top: ${props => props.theme.spacingXLarge};
  height: 70px;
`;

const OTP = props => {
  const {
    pageTitle,
    onBack,
    mobile,
    otpReference,
    validOtp,
    isProcessing,
    isVerifySuccess,
    isError,
    clearSuccessState,
    onVerifySuccess,
    resendOtp: pResendOtp,
    verifyOtp: pVerifyOtp
  } = props;
  const [otp, setOtp] = useState("");
  const [otpInputVariant, setOtpInputVariant] = useState("default");
  const [invalidOtp, setInvalidOtp] = useState(false);
  const [serverError, setServerError] = useState(false);
  const [disableResend, setDisableResend] = useState(false);
  const [disableNextButton, setDisableNextButton] = useState(false);
  const [remainingLabel, setRemainingLabel] = useState("");
  let resentTimerInterval = null;

  useEffect(() => {
    let countDown = props.remainingTime;
    resentTimerInterval = setInterval(() => {
      --countDown;
      if (countDown > 0) {
        setDisableResend(true);
        setRemainingLabel(
          `${i18n.t("OTP.Mobile.Resend.Link")}${i18n.t("OTP.Mobile.Resend.Timer", {
            timeLeft: countDown
          })}`
        );
      } else {
        setRemainingLabel("");
        setDisableResend(false);
        clearInterval(resentTimerInterval);
      }
    }, 1000);

    return () => {
      clearInterval(resentTimerInterval);
    };
  }, [props.remainingTime]);

  useEffect(() => {
    setInvalidOtp(false);
    setServerError(false);
    setDisableNextButton(otp.length < 6);
  }, [otp]);

  useEffect(() => {
    if (validOtp !== null) {
      setInvalidOtp(!validOtp);
    }
  }, [validOtp, isProcessing]);

  useEffect(() => {
    if (isVerifySuccess) {
      clearSuccessState();
      onVerifySuccess();
    }
  }, [isVerifySuccess]);

  useEffect(() => {
    setServerError(isError);
    setDisableNextButton(!isError);
  }, [isError]);

  const displayError = () => {
    return (serverError || invalidOtp) && !isProcessing && otp?.length === 6;
  };

  const resendOtp = () => {
    debounce(() => {
      setOtp("");
      pResendOtp();
    }, 1000).apply(this);
  };

  const verifyOtp = () => {
    setDisableNextButton(true);
    debounce(() => {
      pVerifyOtp(otp);
    }, 1000).apply(this);
  };

  const onChangeCode = code => {
    setOtp(code);
    setOtpInputVariant(code === "" ? "default" : "typing");
  };

  const getDisplayRemainingLabel = useCallback(() => {
    if (remainingLabel) {
      return <ResendLabel disabled>{remainingLabel}</ResendLabel>;
    }
    return null;
  }, [remainingLabel]);

  return (
    <AccountDeletionFormWrapper
      scrollable
      pageTitle={pageTitle}
      onBack={onBack}
      renderButtons={() => (
        <FormButton
          text={i18n.t("Setting.DeleteUser.OTP.NextButton")}
          onPress={verifyOtp}
          disabled={disableNextButton}
        />
      )}
    >
      <HeaderContainer>
        <TitleLabel>{i18n.t("Setting.DeleteUser.OTP.Mobile.Header")}</TitleLabel>
        {mobile && (
          <>
            <DescriptionLabel>
              {i18n.t("Setting.DeleteUser.OTP.Mobile.Description", { mobileNumber: mobile })}
            </DescriptionLabel>
            <InputContainer>
              <PinContainer>
                <PinNumberInput
                  code={otp || ""}
                  codeLength={6}
                  onChangeCode={value => {
                    onChangeCode(value);
                  }}
                  variant={displayError() ? "error" : otpInputVariant}
                />
              </PinContainer>
              <ErrorContainer>
                {displayError() && (
                  <ErrorLabel>
                    {i18n.t("Setting.DeleteUser.OTP.Mobile.Reference.Invalid")}
                  </ErrorLabel>
                )}
              </ErrorContainer>
              <ResentContainer>
                <ResendWarning>
                  {i18n.t("Setting.DeleteUser.OTP.Mobile.Resend.Description")}
                </ResendWarning>
                {getDisplayRemainingLabel() || (
                  <TouchableOpacity disabled={disableResend} onPress={resendOtp}>
                    <ResendLabel disabled={disableResend}>
                      {i18n.t("Setting.DeleteUser.OTP.Mobile.Resend.Link")}
                    </ResendLabel>
                  </TouchableOpacity>
                )}
              </ResentContainer>
              <ReferenceLabel>
                {i18n.t("Setting.DeleteUser.OTP.Mobile.Reference.Label", {
                  otpReference
                })}
              </ReferenceLabel>
            </InputContainer>
          </>
        )}
      </HeaderContainer>
    </AccountDeletionFormWrapper>
  );
};

OTP.defaultProps = {
  validOtp: true,
  remainingTime: 0
};

OTP.propTypes = {
  pageTitle: PropTypes.string.isRequired,
  onBack: PropTypes.func.isRequired,
  isVerifySuccess: PropTypes.bool.isRequired,
  isProcessing: PropTypes.bool.isRequired,
  isError: PropTypes.bool.isRequired,
  verifyOtp: PropTypes.func.isRequired,
  resendOtp: PropTypes.func.isRequired,
  mobile: PropTypes.string.isRequired,
  otpReference: PropTypes.string.isRequired,
  validOtp: PropTypes.bool,
  remainingTime: PropTypes.number,
  onVerifySuccess: PropTypes.func.isRequired,
  clearSuccessState: PropTypes.func.isRequired,
  navigator: PropTypes.shape({
    dismissAllModals: PropTypes.func,
    push: PropTypes.func,
    pop: PropTypes.func
  }).isRequired
};

export default OTP;
