// @ts-nocheck
import React, { PureComponent } from "react";
import { TouchableOpacity } from '@dynatrace/react-native-plugin/lib/react-native/';
import { Platform } from "react-native";
import I18n from "react-native-i18n";
import PropTypes from "prop-types";
import styled from "styled-components/native";

import {
  formatNumber,
  maskedSCBBankAccount,
  stringToNumberFormat,
  stripNonNumericChars,
} from "../../../modules/format";

import { showInAppNotification } from "../../../modules/navigation";

import {
  PrimaryButton,
  TextInput,
  MessageBottomModal,
  ViewContainer
} from "../../../components-2";

import PickerRollerModal from "../components/picker-roller-modal";
import PaymentAccount from "../components/payment-account";
import PinCode from "../../digital-advisor/pin-code";


const SectionContainer = styled.View`
  background-color: ${props => props.theme.backgroundSecondaryPurple};
  border-bottom-right-radius: ${props => props.theme.spacingMedium};
  border-bottom-left-radius: ${props => props.theme.spacingMedium};
`;

const KeyBoardAware = styled.KeyboardAvoidingView`
  flex: 1;
`;

const ScrollView = styled.ScrollView`
  flex: 1;
`;

const ButtonContainer = styled.View`
  padding: ${props => props.theme.spacingMedium};
`;

const Form = styled.View`
  flex: 1;
  padding-left: ${props => props.theme.spacingMedium};
  padding-right: ${props => props.theme.spacingMedium};
`;

const FormInput = styled.View`
  padding-top: ${props => props.theme.spacingMedium};
`;

class ThematicEditDCA extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      amount: props.amount,
      day: props.day,
      dayItems: [],
      isInputValid: false,
      errorDayText: null,
      errorAmountText: null,
      modalVisible: false,
      isDelete: false,
      isShowPin: false,
      openPickerRollerModal: false,
    };

    props.navigator.setStyle({
      tabbarHidden: true,
      navBarCustomView: "digitalAdvisorNavBarScreen",
      navBarCustomViewInitialProps: {
        navigator: props.navigator,
        title: "แก้ไขแผน DCA",
        rightIcon: "delete",
        onRightPressButton: this.onConfirmDeleteDCA,
      },
      navBarComponentAlignment: "fill"
    });
  }

  componentDidMount() {
    this.createDays();
    this.onDidMount();
  }

  onDidMount = () => {
    const { amount, day } = this.props;
    if (amount && day) {
      const number = this.stringToInt(amount);
      const total = this.displayNumber(number);
      this.setState({
         amount: total,
         day,
      }, () => {
        this.validateInput();
      });
    }
  }

  onConfirmDeleteDCA = () => {
    this.setState({ modalVisible: true, isDelete: false });
  }

  onCloseDCA = () => {
    this.setState({ modalVisible: false, isDelete: false });
  }

  onDeleteDCA = () => {
    this.setState({ modalVisible: false, isDelete: true });
  }

  onModalHide = () => {
    const { isDelete } = this.state;
    // this.onCloseDCA();
    if (isDelete) {
      this.setState({ isShowPin: true });
    }
  }

  onSubmit = () => {
    this.setState({ isShowPin: true });
  }

  onSubmittedPin = (userPin) => {
    const { portfolioId } = this.props;
    const { day, amount, isDelete } = this.state;
    if (isDelete) {
      this.props.deleteDCAThematicPortfolio({
        portfolioId,
        userPin,
        onRequestDone: (result) => this.onRequestDone(result, false)
      });
    } else {
      this.props.updateDCAThematicPortfolio({
        portfolioId,
        userPin,
        monthlyInvestment: stripNonNumericChars(amount),
        date: Number(day),
        onRequestDone: (result) => this.onRequestDone(result, true)
      });
    }
  }

  onPinCancel = () => {
    this.setState({ isShowPin: false, isDelete: false });
  }

  onRequestDone = (data, isUpdate = false) => {
    const { isDcaUpdated } = this.props;

    if (data.success) {
      if (isDcaUpdated) {
        isDcaUpdated(false);
      }

      this.setState({ isShowPin: false, isDelete: false });
      this.onGoBack(isUpdate);
    }
  }

  onGoBack = (isUpdate = false) => {
    const message = isUpdate ? I18n.t("Thematic.DCAUpdateSuccessful") : I18n.t("Thematic.DCADeleteSuccessful");
    showInAppNotification(this.props.navigator, {
      text: message,
      variant: "success"
    });
    this.props.navigator.pop({ animated: false });
  }

  onFormatNumber = value => {
    if (value !== null && value !== undefined) {
      const number = this.stringToInt(value);
      const total = this.displayNumber(number);
      this.setState({ amount: total }, () => this.validateInput());
    }
  }

  onPickerModalClose = () => {
    const { errorDayText } = this.state;
    if (errorDayText) {
      this.validateInput();
    }
  }

  onPickerConfirm = (value) => {
    const { errorDayText } = this.state;
    const dayIsNull = value === null || value === "";
    const day = dayIsNull ? "1" : value;
    this.setState({ day, openPickerRollerModal: false }, () => {
      if (errorDayText) {
        this.validateInput();
      }
    });
  }

  createDays = () => {
    const days = [];
    for (let i = 1; i <= 31; i++) {
      days.push(i.toString());
    }
    this.setState({ dayItems: days });
  }

  stringToInt = value => {
    const regex = /,/g;
    const number = value.toString().replace(regex, "");
    return Number(number) || 0;
  }

  validateInput = () => {
    const { amount, day } = this.state;
    const { minimumAmount } = this.props;
    let errorDayText = null;
    let errorAmountText = null;
    let valid = true;
    if (day === null || day === undefined) {
      valid = false;
      errorDayText = I18n.t("Thematic.Validation.Date");
    }
    if (amount === null || amount === undefined) {
      valid = false;
      errorAmountText = I18n.t("Thematic.Validation.Number");
    }
    if (amount) {
      if (this.stringToInt(amount) < 1 || this.stringToInt(amount) < minimumAmount) {
        valid = false;
        errorAmountText = I18n.t("Thematic.Validation.Number");
      }
    }
    if (valid) {
      this.setState({
        isInputValid: true,
        errorDayText: null,
        errorAmountText: null
      });
    } else {
      this.setState({
        isInputValid: false,
        errorDayText,
        errorAmountText
      });
    }
  }

  displayNumber = value => {
    const options = {
      thousandSeparated: true,
      mantissa: 2
    };
    return formatNumber(value, options);
  }

  render() {
    const {
      amount,
      day,
      isInputValid,
      errorAmountText,
      errorDayText,
      modalVisible,
      isShowPin,
      openPickerRollerModal,
      dayItems,
    } = this.state;
    const { bankAccount, minimumAmount, navigator } = this.props;
    const bankAccountDisplay = maskedSCBBankAccount(bankAccount.replace(/-/g, ""));

    return (
      <ViewContainer variant="light" isFullScreen>
        {
          isShowPin && (
            <PinCode
              onSubmittedPin={this.onSubmittedPin}
              onPinCancel={this.onPinCancel}
              navigator={navigator}
            />
          )
        }
        <SectionContainer>
          <PaymentAccount
            id="paymentAccount"
            paymentAccountNumber={bankAccountDisplay}
          />
        </SectionContainer>
        <KeyBoardAware
          behavior={Platform.OS === "ios" ? "padding" : "height"}
          keyboardVerticalOffset={100}
        >
          <ScrollView>
            <Form>
              <TouchableOpacity
                id="dropdownButton"
                activeOpacity={1}
                onPress={() => this.setState({ openPickerRollerModal: true })}
                pointerEvents="box-only"
              >
                <FormInput pointerEvents="none">
                  <TextInput
                    id="dropdownInput"
                    label={I18n.t("Thematic.DayOfMonthLabel")}
                    suffixPlaceholder={I18n.t("Thematic.DayOfMonthInlineLabel")}
                    placeholder="1"
                    keyboardType="numeric"
                    value={day}
                    variant={errorDayText ? "error" : null}
                    helperText={errorDayText}
                    pointerEvents="none"
                  />
                </FormInput>
              </TouchableOpacity>
              <FormInput>
                <TextInput
                  id="textInput"
                  label={I18n.t("Thematic.MonthlyInvestmentLabel")}
                  suffixPlaceholder={I18n.t("Thematic.Currency.THB")}
                  placeholder="0.00"
                  keyboardType="numeric"
                  variant={errorAmountText ? "error" : null}
                  value={amount}
                  onChangeText={(value) => this.setState({ amount: value })}
                  onSubmitEditing={() => this.onFormatNumber(amount)}
                  onBlur={() => this.onFormatNumber(amount)}
                  helperText={`*${I18n.t("Thematic.FirstInvestHelperText",
                    { minimum: stringToNumberFormat(minimumAmount) }
                  )}`}
                  returnKeyType="done"
                />
              </FormInput>
            </Form>
          </ScrollView>
        </KeyBoardAware>
        <ButtonContainer>
          <PrimaryButton
            id="navigate"
            onPress={this.onSubmit}
            disable={!isInputValid}
            label={I18n.t("Thematic.Button.OK")}
            size="large"
          />
        </ButtonContainer>
        <MessageBottomModal
          isVisible={modalVisible}
          title={I18n.t("Thematic.DCADialog.DeleteTitle")}
          body={I18n.t("Thematic.DCADialog.DeleteMessage")}
          onModalHide={this.onModalHide}
          onModalClose={this.onCloseDCA}
          buttonAlignment="row"
          buttons={[
            {
              variant: "secondary",
              label: I18n.t("Thematic.DCADialog.Cancel"),
              onPress: this.onCloseDCA
            },
            {
              variant: "primary",
              label: I18n.t("Thematic.DCADialog.Delete"),
              onPress: this.onDeleteDCA
            }
          ]}
        />
        <PickerRollerModal
          isVisible={openPickerRollerModal}
          onModalClose={this.onPickerModalClose}
          pickerProps={{
            confirmText: "Done",
            pickerData: dayItems,
            selectedValue: day,
            onConfirm: this.onPickerConfirm,
          }}
        />
      </ViewContainer>
    );
  }
}

ThematicEditDCA.defaultProps = {
  bankAccount: "",
  minimumAmount: 500,
  amount: null,
  day: null,
};

ThematicEditDCA.propTypes = {
  navigator: PropTypes.shape({
    setButtons: PropTypes.func,
    pop: PropTypes.func,
    setStyle: PropTypes.func,
  }).isRequired,
  bankAccount: PropTypes.string,
  minimumAmount: PropTypes.number,
  amount: PropTypes.string,
  day: PropTypes.string,
  isDcaUpdated: PropTypes.func.isRequired,
  updateDCAThematicPortfolio: PropTypes.func.isRequired,
  deleteDCAThematicPortfolio: PropTypes.func.isRequired,
  portfolioId: PropTypes.number.isRequired,
};

export default ThematicEditDCA;
