import React, { Component } from "react";
import { TouchableWithoutFeedback } from '@dynatrace/react-native-plugin/lib/react-native/';
import { Platform, View } from "react-native";
import PropTypes from "prop-types";
import RadioForm from "react-native-simple-radio-button";
import styled from "styled-components/native";
import I18n from "react-native-i18n";
import { ViewContainer, ScrollViewContainer, LoadingIndicator } from "../../components";
import RadioButton from "../../components-2/button/RadioButton";
import { Body2, Header3, PrimaryButton, MessageBottomModal } from "../../components-2";
import Separator from "../../components-2/separator/Separator";
import {
  WalletStatementReport,
  WalletWithHoldingTaxReport
} from "../../features/wallet/wallet-request-report";

import { formatDate } from "../../modules/format";
import { getConfig } from "../../Config";
import { TOP_NAVBAR_HEIGHT } from "../../modules/navigation/defaultStyle";
import { BUDDHIST_ERA_YEAR } from "../../features/wallet/redux/wallet-constants";

const MainContainer = styled(ViewContainer)`
  flex: 1;
  justify-content: center;
  margin-top: ${Platform.OS === "android" ? TOP_NAVBAR_HEIGHT : 0};
  background-color: ${props => props.theme.backgroundWhite};
`;

const CardContainer = styled(View)`
  margin-left: 20;
  margin-right: 20;
`;

const ReportTypeContainer = styled(View)`
  margin-bottom: ${props => props.theme.spacingXXSmall};
`;

const ButtonContainer = styled(View)`
  margin: ${props => props.theme.spacingMedium};
`;

const RadioSelectionForm = styled(RadioForm).attrs({
  formHorizontal: false
})`
  padding-vertical: ${props => props.theme.spacingXXSmall};
`;

const SelectorContainer = styled(View)`
  flex-direction: row;
  padding: ${props => props.theme.spacingMedium};
  margin-bottom: ${props => props.theme.spacingXSmall};
  border: 2px ${props => (props.isSelected ? props.theme.ctaPurple : props.theme.contentColorLight)};
  border-radius: ${props => props.theme.spacingXSmall};
`;
const RadioContainer = styled(View)`
  flex-direction: row;
  align-items: center;
  width: 100%;
`;

const RadioLabelContainer = styled(View)`
  flex-direction: row;
  align-items: flex-start;
`;

const TitleLabel = styled(Body2)`
  padding-right: 40;
  padding-left: 6;
  line-height: 18px;
  flex-shrink: 1;
`;

const Header = styled(Header3)`
  margin-left: ${props => props.theme.spacingLarge};
  margin-top: ${props => props.theme.spacingLarge};
`;

const Statement = "StatementReport";
const WithHoldingTax = "WithHoldingTaxReport";
class WalletReportScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      reportType: Statement,
      startDate: "",
      endDate: "",
      selectedYear: ""
    };
  }

  onSelectWHT = reportType => {
    this.onSelectStartDate("");
    this.onSelectEndDate("");
    this.setState({ reportType });
  };

  onSelectStatement = reportType => {
    this.onSelectWHTYear("");
    this.setState({ reportType });
  };

  onSelectStartDate = result => {
    this.setState({ startDate: result });
  };

  onSelectEndDate = result => {
    this.setState({ endDate: result });
  };

  onSelectWHTYear = result => {
    this.setState({ selectedYear: result });
  };

  onSubmit = () => {
    const { userId, sendStatementReport, sendWithHoldingTaxReport, onLoading } = this.props;
    const { startDate, endDate, reportType, selectedYear } = this.state;

    onLoading();

    switch (reportType) {
      case Statement:
        sendStatementReport(
          userId,
          this.convertDateToMonthRequest(startDate),
          this.convertDateToMonthRequest(endDate)
        );
        break;
      case WithHoldingTax:
        sendWithHoldingTaxReport(userId, parseInt(selectedYear, 10) - BUDDHIST_ERA_YEAR);
        break;
      default:
    }

    return true;
  };

  validateStatement = () => {
    const { startDate, endDate, reportType } = this.state;
    if (Statement === reportType) {
      return startDate === "" || endDate === "";
    }

    return true;
  };

  validateWithHoldingTax = () => {
    const { selectedYear, reportType } = this.state;
    if (WithHoldingTax === reportType) {
      return selectedYear === "";
    }

    return true;
  };

  isDisableWHTButton = () => {
    const { userProfile } = this.props;
    return !userProfile.whtYears?.length;
  };

  convertDateToMonthRequest = date => {
    const locale = getConfig().EN_OVERRIDES_ENABLED === "true" ? "th" : I18n.locale || "th";
    if (date) {
      const dateFormatAD = new Date(date.getFullYear() - BUDDHIST_ERA_YEAR, date.getMonth());
      return formatDate(dateFormatAD, "YYYY-MM", locale);
    }
    return null;
  };

  renderStatementReport = () => {
    const { reportType } = this.state;
    const params = {
      objValue: "Statement",
      label: I18n.t("Wallet.StatementReport.Transaction"),
      onPress: () => this.onSelectStatement(Statement),
      isSelect: reportType === Statement
    };

    return this.renderRadioButton(params);
  };

  renderWHTButton = () => {
    const { reportType } = this.state;
    const params = {
      objValue: "WithHoldingTax",
      label: I18n.t("Wallet.WithHoldingTaxReport.Header"),
      onPress: () => this.onSelectWHT(WithHoldingTax),
      isSelect: reportType === WithHoldingTax,
      disableMsg: I18n.t("Wallet.WithHoldingTaxReport.NoDate"),
      disable: this.isDisableWHTButton()
    };

    return this.renderRadioButton(params);
  };

  renderRadioButton = params => {
    return (
      <TouchableWithoutFeedback disabled={params.disable} onPress={params.onPress}>
        <SelectorContainer isSelected={params.isSelect}>
          <RadioContainer>
            <RadioButton
              onPress={params.onPress}
              value={{ value: params.objValue }}
              isSelected={params.isSelect}
              disabled={params.disable}
            />
            <RadioLabelContainer>
              <TitleLabel>{params.label}</TitleLabel>
            </RadioLabelContainer>
          </RadioContainer>
        </SelectorContainer>
      </TouchableWithoutFeedback>
    );
  };

  renderDialogError = () => {
    const { errorDialog } = this.props;
    if (!errorDialog) { return null; }
    return (
      <MessageBottomModal
        isVisible
        title={errorDialog.title}
        body={errorDialog.description}
        buttons={[
          {
            variant: "primary",
            label: errorDialog.button.text,
            onPress: errorDialog.button.onPress
          }
        ]}
        onModalClose={errorDialog.button.onPress}
      />
    );
  };

  render() {
    const { loading, userEmail, userProfile } = this.props;
    const { startDate, endDate, selectedYear, reportType } = this.state;
    if (loading) {
      return (
        <MainContainer variant="screen" isFullScreen>
          <LoadingIndicator />
        </MainContainer>
      );
    }
    return (
      <MainContainer variant="screen">
        <ScrollViewContainer>
          <Header>{I18n.t("Wallet.StatementReport.Type")} </Header>
          <CardContainer>
            <ReportTypeContainer>
              <RadioSelectionForm>
                {this.renderStatementReport()}
                {this.renderWHTButton()}
              </RadioSelectionForm>
            </ReportTypeContainer>
          </CardContainer>
          <Separator variant="full" />

          {reportType === Statement && (
            <WalletStatementReport
              startDate={startDate}
              endDate={endDate}
              userEmail={userEmail}
              onStartDateChange={this.onSelectStartDate}
              onEndDateChange={this.onSelectEndDate}
            />
          )}
          {reportType === WithHoldingTax && (
            <WalletWithHoldingTaxReport
              selectedYear={selectedYear}
              userEmail={userEmail}
              onSelectWHTYear={this.onSelectWHTYear}
              whtYears={userProfile.whtYears}
            />
          )}
        </ScrollViewContainer>
        <ButtonContainer>
          <PrimaryButton
            disable={this.validateStatement() && this.validateWithHoldingTax()}
            onPress={this.onSubmit}
            label={I18n.t("Wallet.StatementReport.Submit")}
          />
        </ButtonContainer>
        {this.renderDialogError()}
      </MainContainer>
    );
  }
}

WalletReportScreen.defaultProps = {
  loading: false,
  userProfile: {
    maxYearWHT: ""
  },
  onLoading: () => {},
  errorDialog: null
};

WalletReportScreen.propTypes = {
  userEmail: PropTypes.string.isRequired,
  userId: PropTypes.string.isRequired,
  loading: PropTypes.bool,
  sendStatementReport: PropTypes.func.isRequired,
  sendWithHoldingTaxReport: PropTypes.func.isRequired,
  userProfile: PropTypes.shape({
    whtYears: PropTypes.number.isRequired
  }),
  errorDialog: PropTypes.shape,
  onLoading: PropTypes.func
};

export default WalletReportScreen;
