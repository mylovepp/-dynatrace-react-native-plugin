// @ts-nocheck
import React, { Component } from "react";
import { Text } from '@dynatrace/react-native-plugin/lib/react-native/';
import { I18nManager, StyleSheet, TextInput, View, ViewPropTypes } from "react-native";
import PropTypes from "prop-types";
// eslint-disable-next-line import/no-extraneous-dependencies
import * as Animatable from "react-native-animatable";
import colors from "../../theme";

const styles = StyleSheet.create({
  containerDefault: {},
  cellDefault: {
    borderColor: colors.contentColorHigh,
    borderWidth: 1
  },
  cellFocusedDefault: {
    borderColor: colors.contentColorVeryHigh,
    borderWidth: 2
  },
  textStyleDefault: {
    color: colors.contentColorHigh,
    fontSize: 24
  },
  textStyleFocusedDefault: {
    color: colors.contentColorVeryHigh
  }
});

class SmoothPinCodeInput extends Component {
  state = {
    maskDelay: false,
    focused: false
  };
  // eslint-disable-next-line react/sort-comp
  ref = React.createRef();
  inputRef = React.createRef();

  animate = ({ animation = "shake", duration = 650 }) => {
    if (!this.props.animated) {
      return new Promise((resolve, reject) => reject(new Error("Animations are disabled")));
    }
    return this.ref.current[animation](duration);
  };

  shake = () => this.animate({ animation: "shake" });

  focus = () => {
    return this.inputRef.current.focus();
  };

  blur = () => {
    return this.inputRef.current.blur();
  };

  clear = () => {
    return this.inputRef.current.clear();
  };

  inputCode = (code) => {
    const { password, codeLength = 4, onTextChange, onFulfill } = this.props;

    if (this.props.restrictToNumbers) {
      // eslint-disable-next-line no-param-reassign
      code = (code.match(/[0-9]/g) || []).join("");
    }

    if (onTextChange) {
      onTextChange(code);
    }
    if (code.length === codeLength && onFulfill) {
      onFulfill(code);
    }

    // handle password mask
    const maskDelay = password &&
      code.length > this.props.value.length; // only when input new char
    this.setState({ maskDelay });

    if (maskDelay) { // mask password after delay
      clearTimeout(this.maskTimeout);
      this.maskTimeout = setTimeout(() => {
          this.setState({ maskDelay: false });
        },
        this.props.maskDelay
      );
    }
  };

  keyPress = (event) => {
    if (event.nativeEvent.key === "Backspace") {
      const { value, onBackspace } = this.props;
      if (value === "" && onBackspace) {
        onBackspace();
      }
    }
  };

  onFocused = () => {
    this.setState({ focused: true });
    if (typeof this.props.onFocus === "function") {
      this.props.onFocus();
    }
  };

  onBlurred = () => {
    this.setState({ focused: false });
    if (typeof this.props.onBlur === "function") {
      this.props.onBlur();
    }
  };

  componentWillUnmount() {
    clearTimeout(this.maskTimeout);
  }

  render() {
    const {
      value,
      codeLength, cellSize, cellSpacing,
      placeholder,
      password,
      mask,
      autoFocus,
      containerStyle,
      cellStyle,
      cellStyleFocused,
      cellStyleFilled,
      textStyle,
      textStyleFocused,
      keyboardType,
      animationFocused,
      animated,
      testID,
      editable,
      inputProps,
    } = this.props;
    const { maskDelay, focused } = this.state;
    return (
      <Animatable.View
        ref={this.ref}
        style={[{
          alignItems: "stretch",
          flexDirection: "row",
          justifyContent: "center",
          position: "relative",
          width: cellSize * codeLength + cellSpacing * (codeLength - 1),
          height: cellSize
        },
          containerStyle
        ]}
      >
        <View style={{
          position: "absolute",
          margin: 0,
          height: "100%",
          flexDirection: I18nManager.isRTL ? "row-reverse" : "row",
          alignItems: "center"
        }}
        >
          {
            // eslint-disable-next-line prefer-spread
            Array.apply(null, Array(codeLength))
              .map((_, index) => {
                const cellFocused = focused && index === value.length;
                const filled = index < value.length;
                const last = (index === value.length - 1);
                const showMask = filled && (password && (!maskDelay || !last));
                const isPlaceholderText = typeof placeholder === "string";
                const isMaskText = typeof mask === "string";
                const pinCodeChar = value.charAt(index);

                let cellText = null;
                if (filled || placeholder !== null) {
                  if (showMask && isMaskText) {
                    cellText = mask;
                  } else if (!filled && isPlaceholderText) {
                    cellText = placeholder;
                  } else if (pinCodeChar) {
                    cellText = pinCodeChar;
                  }
                }

                const placeholderComponent = !isPlaceholderText ? placeholder : null;
                const maskComponent = (showMask && !isMaskText) ? mask : null;
                const isCellText = typeof cellText === "string";

                return (
                  <Animatable.View
                    /* eslint-disable-next-line react/no-array-index-key */
                    key={index}
                    style={[
                      {
                        width: cellSize,
                        height: cellSize,
                        marginLeft: cellSpacing / 2,
                        marginRight: cellSpacing / 2,
                        flexDirection: "row",
                        alignItems: "center",
                        justifyContent: "center"
                      },
                      cellStyle,
                      cellFocused ? cellStyleFocused : {},
                      filled ? cellStyleFilled : {}
                    ]}
                    animation={
                      index === value.length && focused && animated
                        ? animationFocused : null}
                    iterationCount="infinite"
                    duration={500}
                  >
                    {isCellText && !maskComponent &&
                      <Text style={[textStyle, cellFocused ? textStyleFocused : {}]}>
                        {cellText}
                      </Text>}

                    {(!isCellText && !maskComponent) && placeholderComponent}
                    {isCellText && maskComponent}
                  </Animatable.View>
                );
              })
          }
        </View>
        <TextInput
          value={value}
          ref={this.inputRef}
          onChangeText={this.inputCode}
          onKeyPress={this.keyPress}
          onFocus={() => this.onFocused()}
          onBlur={() => this.onBlurred()}
          spellCheck={false}
          autoFocus={autoFocus}
          keyboardType={keyboardType}
          numberOfLines={1}
          caretHidden
          maxLength={codeLength}
          selection={{
            start: value.length,
            end: value.length
          }}
          style={{
            flex: 1,
            opacity: 0,
            textAlign: "center"
          }}
          testID={testID || undefined}
          editable={editable}
          {...inputProps}
        />
      </Animatable.View>
    );
  }
}

SmoothPinCodeInput.defaultProps = {
  value: "",
  codeLength: 4,
  cellSize: 28,
  cellSpacing: 4,
  placeholder: "",
  password: false,
  mask: "*",
  maskDelay: 100,
  keyboardType: "numeric",
  autoFocus: false,
  restrictToNumbers: false,
  containerStyle: styles.containerDefault,
  cellStyle: null,
  cellStyleFocused: null,
  textStyle: styles.textStyleDefault,
  textStyleFocused: styles.textStyleFocusedDefault,
  animationFocused: "pulse",
  animated: true,
  editable: false,
  inputProps: {},
  onChangeText: () => {},
  onBackspace: () => {},
  onTextChange: () => {},
  onFocus: () => {},
  onBlur: () => {},
};

SmoothPinCodeInput.propTypes = {
  value: PropTypes.string,
  codeLength: PropTypes.number,
  cellSize: PropTypes.number,
  cellSpacing: PropTypes.number,

  placeholder: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),
  mask: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),
  maskDelay: PropTypes.number,
  password: PropTypes.bool,

  autoFocus: PropTypes.bool,

  restrictToNumbers: PropTypes.bool,

  containerStyle: ViewPropTypes.style,

  cellStyle: ViewPropTypes.style,
  cellStyleFocused: ViewPropTypes.style,
  // eslint-disable-next-line react/require-default-props
  cellStyleFilled: ViewPropTypes.style,

  textStyle: Text.propTypes.style,
  textStyleFocused: Text.propTypes.style,

  animated: PropTypes.bool,
  animationFocused: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.object
  ]),

  // eslint-disable-next-line react/require-default-props
  onFulfill: PropTypes.func,
  onChangeText: PropTypes.func,
  onBackspace: PropTypes.func,
  onTextChange: PropTypes.func,
  // eslint-disable-next-line react/forbid-prop-types,react/require-default-props
  testID: PropTypes.any,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  keyboardType: PropTypes.string,
  editable: PropTypes.bool,
  inputProps: PropTypes.exact(TextInput.propTypes)
};

export default SmoothPinCodeInput;
